Index: linux-2.6.24/drivers/i2c/chips/pcf50606.c
===================================================================
--- linux-2.6.24.orig/drivers/i2c/chips/pcf50606.c
+++ linux-2.6.24/drivers/i2c/chips/pcf50606.c
@@ -628,8 +628,20 @@
 			if (pcf->onkey_seconds >=
 			    pcf->pdata->onkey_seconds_required) {
 				/* Ask init to do 'ctrlaltdel' */
-				DEBUGPC("SIGINT(init) ");
-				kill_proc(1, SIGINT, 1);
+				/*
+				 * currently Linux reacts badly to issuing a
+				 * signal to PID #1 before init is started.
+				 * What happens is that the next kernel thread
+				 * to start, which is the JFFS2 Garbage
+				 * collector in our case, gets the signal
+				 * instead and proceeds to fail to fork --
+				 * which is very bad.  Therefore we confirm
+				 * PID #1 exists before issuing the signal
+				 */
+				if (find_task_by_pid(1)) {
+					kill_proc(1, SIGINT, 1);
+					DEBUGPC("SIGINT(init) ");
+				}
 				/* FIXME: what to do if userspace doesn't
 				 * shut down? Do we want to force it? */
 			}
@@ -723,11 +735,38 @@
 	}
 	/* FIXME: TSCPRES */
 	if (pcfirq[2] & PCF50606_INT3_LOWBAT) {
-		/* Really low battery voltage, we have 8 seconds left */
-		DEBUGPC("LOWBAT ");
-		apm_queue_event(APM_LOW_BATTERY);
-		DEBUGPC("SIGPWR(init) ");
-		kill_proc(1, SIGPWR, 1);
+		if (__reg_read(pcf, PCF50606_REG_OOCS) & PCF50606_OOCS_EXTON) {
+			/*
+			 * hey no need to freak out, we have some kind of
+			 * valid charger power
+			 */
+			DEBUGPC("(NO)BAT ");
+		} else {
+			/* Really low battery voltage, we have 8 seconds left */
+			DEBUGPC("LOWBAT ");
+			/*
+			 * currently Linux reacts badly to issuing a signal to
+			 * PID #1 before init is started.  What happens is that
+			 * the next kernel thread to start, which is the JFFS2
+			 * Garbage collector in our case, gets the signal
+			 * instead and proceeds to fail to fork -- which is
+			 * very bad.  Therefore we confirm PID #1 exists
+			 * before issuing SPIGPWR
+			 */
+			if (find_task_by_pid(1)) {
+				apm_queue_event(APM_LOW_BATTERY);
+				DEBUGPC("SIGPWR(init) ");
+				kill_proc(1, SIGPWR, 1);
+			} else
+				/*
+				 * well, our situation is like this:  we do not
+				 * have any external power, we have a low
+				 * battery and since PID #1 doesn't exist yet,
+				 * we are early in the boot, likely before
+				 * rootfs mount.  We should just call it a day
+				 */
+				apm_queue_event(APM_CRITICAL_SUSPEND);
+		}
 		/* Tell PMU we are taking care of this */
 		reg_set_bit_mask(pcf, PCF50606_REG_OOCC1,
 				 PCF50606_OOCC1_TOTRST,
