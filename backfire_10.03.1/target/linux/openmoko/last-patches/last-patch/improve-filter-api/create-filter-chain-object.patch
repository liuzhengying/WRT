Create filter chain object

From: Nelson Castillo <arhuaco@freaks-unidos.net>

~ Make the filter chain a new object
~ We can build now with CONFIG_TOUCHSCREEN_FILTER=n with no problems in
  a clean way.

The new ts_filter_chain.c is copied with no history but it changed
so much that it really doesn't matter. It's like it's brand new.

Signed-off-by: Nelson Castillo <arhuaco@freaks-unidos.net>
---

 arch/arm/mach-s3c2410/include/mach/ts.h     |    2 
 arch/arm/mach-s3c2410/mach-gta01.c          |    3 
 arch/arm/mach-s3c2442/mach-gta02.c          |    3 
 drivers/input/touchscreen/Makefile          |    2 
 drivers/input/touchscreen/s3c2410_ts.c      |   22 ++-
 drivers/input/touchscreen/ts_filter.c       |  168 -------------------------
 drivers/input/touchscreen/ts_filter.h       |   38 ------
 drivers/input/touchscreen/ts_filter_chain.c |  184 +++++++++++++++++++++++++++
 drivers/input/touchscreen/ts_filter_chain.h |   57 ++++++++
 9 files changed, 258 insertions(+), 221 deletions(-)
 delete mode 100644 drivers/input/touchscreen/ts_filter.c
 create mode 100644 drivers/input/touchscreen/ts_filter_chain.c
 create mode 100644 drivers/input/touchscreen/ts_filter_chain.h


diff --git a/arch/arm/mach-s3c2410/include/mach/ts.h b/arch/arm/mach-s3c2410/include/mach/ts.h
index 41ac64c..ffd73d5 100644
--- a/arch/arm/mach-s3c2410/include/mach/ts.h
+++ b/arch/arm/mach-s3c2410/include/mach/ts.h
@@ -27,7 +27,7 @@ struct s3c2410_ts_mach_info {
 	 * Null-terminated array of pointers to filter APIs and configurations
 	 * we want to use. In the same order they will be applied.
 	 */
-	const struct ts_filter_configuration *filter_config;
+	const struct ts_filter_chain_configuration *filter_config;
 };
 
 void set_s3c2410ts_info(const struct s3c2410_ts_mach_info *hard_s3c2410ts_info);
diff --git a/arch/arm/mach-s3c2410/mach-gta01.c b/arch/arm/mach-s3c2410/mach-gta01.c
index d40cd83..a828b66 100644
--- a/arch/arm/mach-s3c2410/mach-gta01.c
+++ b/arch/arm/mach-s3c2410/mach-gta01.c
@@ -89,6 +89,7 @@
 
 #include <linux/jbt6k74.h>
 
+#include <../drivers/input/touchscreen/ts_filter_chain.h>
 #ifdef CONFIG_TOUCHSCREEN_FILTER
 #include <../drivers/input/touchscreen/ts_filter_linear.h>
 #include <../drivers/input/touchscreen/ts_filter_mean.h>
@@ -730,7 +731,7 @@ static struct ts_filter_linear_configuration gta01_ts_linear = {
 };
 #endif
 
-struct ts_filter_configuration filter_configuration[] =
+struct ts_filter_chain_configuration filter_configuration[] =
 {
 #ifdef CONFIG_TOUCHSCREEN_FILTER
 	{&ts_filter_group_api,		&gta01_ts_group.config},
diff --git a/arch/arm/mach-s3c2442/mach-gta02.c b/arch/arm/mach-s3c2442/mach-gta02.c
index fa55aba..229271b 100644
--- a/arch/arm/mach-s3c2442/mach-gta02.c
+++ b/arch/arm/mach-s3c2442/mach-gta02.c
@@ -103,6 +103,7 @@
 
 #include "../plat-s3c24xx/neo1973_pm_gps.h"
 
+#include <../drivers/input/touchscreen/ts_filter_chain.h>
 #ifdef CONFIG_TOUCHSCREEN_FILTER
 #include <../drivers/input/touchscreen/ts_filter_linear.h>
 #include <../drivers/input/touchscreen/ts_filter_mean.h>
@@ -977,7 +978,7 @@ const static struct ts_filter_linear_configuration gta02_ts_linear = {
 };
 #endif
 
-const struct ts_filter_configuration filter_configuration[] =
+const struct ts_filter_chain_configuration filter_configuration[] =
 {
 #ifdef CONFIG_TOUCHSCREEN_FILTER
 	{&ts_filter_group_api,		&gta02_ts_group.config},
diff --git a/drivers/input/touchscreen/Makefile b/drivers/input/touchscreen/Makefile
index 2669d63..940570b 100644
--- a/drivers/input/touchscreen/Makefile
+++ b/drivers/input/touchscreen/Makefile
@@ -35,7 +35,7 @@ wm97xx-ts-$(CONFIG_TOUCHSCREEN_WM9712)	+= wm9712.o
 wm97xx-ts-$(CONFIG_TOUCHSCREEN_WM9713)	+= wm9713.o
 obj-$(CONFIG_TOUCHSCREEN_WM97XX_MAINSTONE)	+= mainstone-wm97xx.o
 obj-$(CONFIG_TOUCHSCREEN_S3C2410)	+= s3c2410_ts.o
-obj-$(CONFIG_TOUCHSCREEN_FILTER)	+= ts_filter.o
+obj-$(CONFIG_TOUCHSCREEN_FILTER)	+= ts_filter_chain.o
 obj-$(CONFIG_TOUCHSCREEN_FILTER_GROUP)	+= ts_filter_group.o
 obj-$(CONFIG_TOUCHSCREEN_FILTER_LINEAR)	+= ts_filter_linear.o
 obj-$(CONFIG_TOUCHSCREEN_FILTER_MEDIAN)	+= ts_filter_median.o
diff --git a/drivers/input/touchscreen/s3c2410_ts.c b/drivers/input/touchscreen/s3c2410_ts.c
index ccd4a44..13f9886 100644
--- a/drivers/input/touchscreen/s3c2410_ts.c
+++ b/drivers/input/touchscreen/s3c2410_ts.c
@@ -65,7 +65,7 @@
 #include <mach/hardware.h>
 #include <plat/regs-adc.h>
 
-#include "ts_filter.h"
+#include "ts_filter_chain.h"
 
 /* For ts.dev.id.version */
 #define S3C2410TSVERSION	0x0101
@@ -110,7 +110,7 @@ static char *s3c2410ts_name = "s3c2410 TouchScreen";
 
 struct s3c2410ts {
 	struct input_dev *dev;
-	struct ts_filter **tsf;
+	struct ts_filter_chain *chain;
 	int is_down;
 	int state;
 	struct kfifo *event_fifo;
@@ -238,7 +238,7 @@ static void event_send_timer_f(unsigned long data)
 			ts_input_report(IE_UP, NULL);
 			ts.state = TS_STATE_STANDBY;
 
-			ts_filter_chain_clear(ts.tsf);
+			ts_filter_chain_clear(ts.chain);
 		}
 	} else {
 		mod_timer(&event_send_timer, jiffies + TS_RELEASE_TIMEOUT);
@@ -292,13 +292,13 @@ static irqreturn_t stylus_action(int irq, void *dev_id)
 	buf[2] = readl(base_addr + S3C2410_ADCDAT1) &
 		       S3C2410_ADCDAT1_YPDATA_MASK;
 
-	switch (ts_filter_chain_feed(ts.tsf, &buf[1])) {
+	switch (ts_filter_chain_feed(ts.chain, &buf[1])) {
 	case 0:
 		s3c2410_ts_start_adc_conversion();
 		return IRQ_HANDLED;
 	case -1:
 		/* Error. Ignore the event. */
-		ts_filter_chain_clear(ts.tsf);
+		ts_filter_chain_clear(ts.chain);
 		writel(WAIT4INT(1), base_addr + S3C2410_ADCTSC);
 		return IRQ_HANDLED;
 	default:
@@ -410,12 +410,12 @@ static int __init s3c2410ts_probe(struct platform_device *pdev)
 	}
 
 	/* create the filter chain set up for the 2 coordinates we produce */
-	ts.tsf = ts_filter_chain_create(pdev, info->filter_config, 2);
+	ts.chain = ts_filter_chain_create(pdev, info->filter_config, 2);
 
-	if (!ts.tsf)
+	if (IS_ERR(ts.chain))
 		goto bail2;
 
-	ts_filter_chain_clear(ts.tsf);
+	ts_filter_chain_clear(ts.chain);
 
 	/* Get irqs */
 	if (request_irq(IRQ_ADC, stylus_action, IRQF_SAMPLE_RANDOM,
@@ -454,7 +454,7 @@ bail5:
 bail4:
 	disable_irq(IRQ_ADC);
 bail3:
-	ts_filter_chain_destroy(ts.tsf);
+	ts_filter_chain_destroy(ts.chain);
 	kfifo_free(ts.event_fifo);
 bail2:
 	input_unregister_device(ts.dev);
@@ -481,7 +481,7 @@ static int s3c2410ts_remove(struct platform_device *pdev)
 	input_unregister_device(ts.dev);
 	iounmap(base_addr);
 
-	ts_filter_chain_destroy(ts.tsf);
+	ts_filter_chain_destroy(ts.chain);
 
 	kfifo_free(ts.event_fifo);
 
@@ -511,7 +511,7 @@ static int s3c2410ts_resume(struct platform_device *pdev)
 	clk_enable(adc_clock);
 	mdelay(1);
 
-	ts_filter_chain_clear(ts.tsf);
+	ts_filter_chain_clear(ts.chain);
 
 	enable_irq(IRQ_ADC);
 	enable_irq(IRQ_TC);
diff --git a/drivers/input/touchscreen/ts_filter.c b/drivers/input/touchscreen/ts_filter.c
deleted file mode 100644
index 9b2b1c5..0000000
--- a/drivers/input/touchscreen/ts_filter.c
+++ /dev/null
@@ -1,168 +0,0 @@
-/*
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
- *
- * Copyright (c) 2008,2009 Andy Green <andy@openmoko.com>
- */
-
-#include <linux/kernel.h>
-#include <linux/device.h>
-#include "ts_filter.h"
-
-/*
- * Tux, would you like the following function in /lib?
- * It helps us avoid silly code.
- */
-
-/**
- * sptrlen - Count how many non-null pointers are in a pointer array
- * @arr: The array of pointers
- */
-static int sptrlen(const void *arr)
-{
-	/* All pointers have the same size. */
-	const int **p = (const int **)arr;
-	int len = 0;
-
-	while (*(p++))
-		len++;
-
-	return len;
-}
-
-/* FIXME: rename & remove this temporal hack. */
-static struct ts_filter **revchain;
-
-struct ts_filter **ts_filter_chain_create(
-	struct platform_device *pdev,
-	const struct ts_filter_configuration conf[],
-	int count_coords)
-{
-	struct ts_filter **arr;
-	int count = 0;
-	int len;
-	int nrev = 0;
-
-	BUG_ON((count_coords < 1));
-	BUG_ON(count_coords > MAX_TS_FILTER_COORDS);
-
-	len = (sptrlen(conf) + 1);
-	/* memory for two null-terminated arrays of filters */
-	arr = kzalloc(2 * sizeof(struct ts_filter *) * len, GFP_KERNEL);
-	if (!arr)
-		goto create_err;
-	revchain = arr + len;
-
-	while (conf->api) {
-		/* TODO: Can we get away with only sending pdev->dev? */
-		struct ts_filter *f =
-			(conf->api->create)(pdev, conf->config, count_coords);
-		if (!f) {
-			dev_info(&pdev->dev, "Filter %d creation failed\n",
-				 count);
-			goto create_err;
-		}
-
-		f->api = conf->api;
-		arr[count++] = f;
-
-		/* Filters that can propagate values in the chain. */
-		if (f->api->haspoint && f->api->getpoint && f->api->process)
-			revchain[nrev++] = f;
-
-		conf++;
-	}
-
-	dev_info(&pdev->dev, "%d filter(s) initialized\n", count);
-
-	return arr;
-
-create_err:
-
-	dev_info(&pdev->dev, "Error in filter chain initialization\n");
-
-	ts_filter_chain_destroy(arr);
-
-	return NULL;
-}
-EXPORT_SYMBOL_GPL(ts_filter_chain_create);
-
-void ts_filter_chain_destroy(struct ts_filter **arr)
-{
-	struct ts_filter **a = arr;
-	int count = 0;
-
-	while (arr && *a) {
-		((*a)->api->destroy)(*a);
-		a++;
-		count++;
-	}
-
-	kfree(arr);
-}
-EXPORT_SYMBOL_GPL(ts_filter_chain_destroy);
-
-void ts_filter_chain_clear(struct ts_filter **arr)
-{
-	while (*arr) {
-		if ((*arr)->api->clear)
-			((*arr)->api->clear)(*arr);
-		arr++;
-	}
-}
-EXPORT_SYMBOL_GPL(ts_filter_chain_clear);
-
-static void ts_filter_chain_scale(struct ts_filter **a, int *coords)
-{
-	while (*a) {
-		if ((*a)->api->scale)
-			((*a)->api->scale)(*a, coords);
-		a++;
-	}
-}
-
-int ts_filter_chain_feed(struct ts_filter **arr, int *coords)
-{
-	/* FIXME: only using revchain */
-	int len = sptrlen(revchain); /* FIXME: save this */
-	int i = len - 1;
-
-	if (!arr[0])
-		return 1; /* Nothing to do. Filtering disabled. */
-
-	BUG_ON(arr[0]->api->haspoint(arr[0]));
-
-	if (arr[0]->api->process(arr[0], coords))
-		return -1;
-
-	while (i >= 0 && i < len) {
-		if (revchain[i]->api->haspoint(revchain[i])) {
-			revchain[i]->api->getpoint(revchain[i], coords);
-			if (++i < len &&
-			    revchain[i]->api->process(revchain[i], coords))
-				return -1; /* Error. */
-		} else {
-			i--;
-		}
-	}
-
-	if (i >= 0) {
-		BUG_ON(i != len); /* FIXME: Remove BUG_ON. */
-		ts_filter_chain_scale(arr, coords); /* TODO: arr! */
-	}
-
-	return i >= 0; /* Same as i == len. */
-}
-EXPORT_SYMBOL_GPL(ts_filter_chain_feed);
-
diff --git a/drivers/input/touchscreen/ts_filter.h b/drivers/input/touchscreen/ts_filter.h
index 0e4704f..aac1e02 100644
--- a/drivers/input/touchscreen/ts_filter.h
+++ b/drivers/input/touchscreen/ts_filter.h
@@ -62,10 +62,6 @@ struct ts_filter_api {
  * as a member.
  */
 struct ts_filter_configuration {
-	/* API to use */
-	const struct ts_filter_api *api;
-	/* Generic filter configuration. Different for each filter. */
-	const struct ts_filter_configuration *config;
 };
 
 struct ts_filter {
@@ -75,38 +71,4 @@ struct ts_filter {
 	int count_coords;
 };
 
-#ifdef CONFIG_TOUCHSCREEN_FILTER
-
-/*
- * Helper to create a filter chain. It will allocate an array of
- * null-terminated pointers to filters.
- */
-extern struct ts_filter **ts_filter_chain_create(
-	struct platform_device *pdev,
-	const struct ts_filter_configuration conf[],
-	int count_coords);
-
-/* Helper to destroy a whole chain from the list of filter pointers. */
-extern void ts_filter_chain_destroy(struct ts_filter **arr);
-
-/* Helper to call the clear API function */
-extern void ts_filter_chain_clear(struct ts_filter **arr);
-
-/*
- * Try to get one point. Returns 0 if no points are available.
- * coords will be used as temporal space, thus you supply a point
- * using coords but you shouldn't rely on its value on return unless
- * it returns a nonzero value that is not -1.
- * If one of the filters find an error then this function will
- * return -1.
- */
-int ts_filter_chain_feed(struct ts_filter **arr, int *coords);
-
-#else /* !CONFIG_TOUCHSCREEN_FILTER */
-#define ts_filter_chain_create(pdev, config, count_coords) (0) /*TODO:fail!*/
-#define ts_filter_chain_destroy(pdev, arr) do { } while (0)
-#define ts_filter_chain_clear(arr) do { } while (0)
-#define ts_filter_chain_feed(arr, coords) (1)
-#endif
-
 #endif
diff --git a/drivers/input/touchscreen/ts_filter_chain.c b/drivers/input/touchscreen/ts_filter_chain.c
new file mode 100644
index 0000000..c778f2b
--- /dev/null
+++ b/drivers/input/touchscreen/ts_filter_chain.c
@@ -0,0 +1,184 @@
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ * Copyright (c) 2008,2009 Andy Green <andy@openmoko.com>
+ */
+
+#include <linux/kernel.h>
+#include <linux/device.h>
+
+#include "ts_filter_chain.h"
+#include "ts_filter.h"
+
+/*
+ * Tux, would you like the following function in /lib?
+ * It helps us avoid silly code.
+ */
+
+/**
+ * sptrlen - Count how many non-null pointers are in a pointer array
+ * @arr: The array of pointers
+ */
+static int sptrlen(const void *arr)
+{
+	/* All pointers have the same size. */
+	const int **p = (const int **)arr;
+	int len = 0;
+
+	while (*(p++))
+		len++;
+
+	return len;
+}
+
+
+struct ts_filter_chain {
+	/* All of the filters. */
+	struct ts_filter **arr;
+	/* Filters that can propagate values in the chain. */
+	struct ts_filter **pchain;
+	/* Length of the pchain array. */
+	int pchain_len;
+	/* FIXME: Add a spinlock and use it. */
+};
+
+struct ts_filter_chain *ts_filter_chain_create(
+	struct platform_device *pdev,
+	const struct ts_filter_chain_configuration conf[],
+	int count_coords)
+{
+	struct ts_filter_chain *c;
+	int count = 0;
+	int len;
+
+	BUG_ON((count_coords < 1));
+	BUG_ON(count_coords > MAX_TS_FILTER_COORDS);
+
+	c = kzalloc(sizeof(struct ts_filter_chain), GFP_KERNEL);
+	if (!c)
+		goto create_err_1;
+
+	len = (sptrlen(conf) + 1);
+	/* Memory for two null-terminated arrays of filters. */
+	c->arr = kzalloc(2 * sizeof(struct ts_filter *) * len, GFP_KERNEL);
+	if (!c->arr)
+		goto create_err_1;
+	c->pchain = c->arr + len;
+
+	while (conf->api) {
+		/* TODO: Can we get away with only sending pdev->dev? */
+		struct ts_filter *f =
+			(conf->api->create)(pdev, conf->config, count_coords);
+		if (!f) {
+			dev_info(&pdev->dev, "Filter %d creation failed\n",
+				 count);
+			goto create_err_2;
+		}
+
+		f->api = conf->api;
+		c->arr[count++] = f;
+
+		if (f->api->haspoint && f->api->getpoint && f->api->process)
+			c->pchain[c->pchain_len++] = f;
+
+		conf++;
+	}
+
+	dev_info(&pdev->dev, "%d filter(s) initialized\n", count);
+
+	return c;
+
+create_err_2:
+	ts_filter_chain_destroy(c); /* Also frees c. */
+create_err_1:
+	dev_info(&pdev->dev, "Error in filter chain initialization\n");
+	/*
+	 * FIXME: Individual filters have to return errors this way.
+	 * We only have to forward the errors we find.
+	 */
+	return ERR_PTR(-ENOMEM);
+}
+EXPORT_SYMBOL_GPL(ts_filter_chain_create);
+
+void ts_filter_chain_destroy(struct ts_filter_chain *c)
+{
+	if (c->arr) {
+		struct ts_filter **a = c->arr;
+		while (*a) {
+			((*a)->api->destroy)(*a);
+			a++;
+		}
+		kfree(c->arr);
+	}
+	kfree(c);
+}
+EXPORT_SYMBOL_GPL(ts_filter_chain_destroy);
+
+void ts_filter_chain_clear(struct ts_filter_chain *c)
+{
+	struct ts_filter **a = c->arr;
+
+	while (*a) {
+		if ((*a)->api->clear)
+			((*a)->api->clear)(*a);
+		a++;
+	}
+}
+EXPORT_SYMBOL_GPL(ts_filter_chain_clear);
+
+static void ts_filter_chain_scale(struct ts_filter_chain *c, int *coords)
+{
+	struct ts_filter **a = c->arr;
+	while (*a) {
+		if ((*a)->api->scale)
+			((*a)->api->scale)(*a, coords);
+		a++;
+	}
+}
+
+int ts_filter_chain_feed(struct ts_filter_chain *c, int *coords)
+{
+	int len = c->pchain_len;
+	int i = len - 1;
+
+	if (!c->pchain[0])
+		return 1; /* Nothing to do. */
+
+	BUG_ON(c->pchain[0]->api->haspoint(c->pchain[0]));
+
+	if (c->pchain[0]->api->process(c->pchain[0], coords))
+		return -1;
+
+	while (i >= 0 && i < len) {
+		if (c->pchain[i]->api->haspoint(c->pchain[i])) {
+			c->pchain[i]->api->getpoint(c->pchain[i], coords);
+			if (++i < len &&
+			    c->pchain[i]->api->process(c->pchain[i], coords))
+				return -1; /* Error. */
+		} else {
+			i--;
+		}
+	}
+
+	if (i >= 0) {	/* Same as i == len. */
+		BUG_ON(i != len); /* FIXME: Remove BUG_ON. */
+		ts_filter_chain_scale(c, coords);
+		return 1;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ts_filter_chain_feed);
+
diff --git a/drivers/input/touchscreen/ts_filter_chain.h b/drivers/input/touchscreen/ts_filter_chain.h
new file mode 100644
index 0000000..d549229
--- /dev/null
+++ b/drivers/input/touchscreen/ts_filter_chain.h
@@ -0,0 +1,57 @@
+#ifndef __TS_FILTER_CHAIN_H__
+#define __TS_FILTER_CHAIN_H__
+
+/*
+ * Touchscreen filter chains.
+ *
+ * (c) 2008,2009 Andy Green <andy@openmoko.com>
+ */
+
+#include "ts_filter.h"
+
+#include <linux/err.h>
+
+struct ts_filter_chain_configuration {
+	/* API to use */
+	const struct ts_filter_api *api;
+	/* Generic filter configuration. Different for each filter. */
+	const struct ts_filter_configuration *config;
+};
+
+struct ts_filter_chain;
+
+#ifdef CONFIG_TOUCHSCREEN_FILTER
+
+/*
+ * Helper to create a filter chain. It will allocate an array of
+ * null-terminated pointers to filters. On error it will return
+ */
+extern struct ts_filter_chain *ts_filter_chain_create(
+	struct platform_device *pdev,
+	const struct ts_filter_chain_configuration conf[],
+	int count_coords);
+
+/* Destroy the chain */
+extern void ts_filter_chain_destroy(struct ts_filter_chain *c);
+
+/* Clear the filter chain */
+extern void ts_filter_chain_clear(struct ts_filter_chain *c);
+
+/*
+ * Try to get one point. Returns 0 if no points are available.
+ * coords will be used as temporal space, thus you supply a point
+ * using coords but you shouldn't rely on its value on return unless
+ * it returns a nonzero value that is not -1.
+ * If one of the filters find an error then this function will
+ * return -1.
+ */
+int ts_filter_chain_feed(struct ts_filter_chain *c, int *coords);
+
+#else /* !CONFIG_TOUCHSCREEN_FILTER */
+#define ts_filter_chain_create(pdev, config, count_coords) (NULL)
+#define ts_filter_chain_destroy(c) do { } while (0)
+#define ts_filter_chain_clear(c) do { } while (0)
+#define ts_filter_chain_feed(c, coords) (1)
+#endif
+
+#endif
